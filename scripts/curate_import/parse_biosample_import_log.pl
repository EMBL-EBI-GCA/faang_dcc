#parse the sample import log file to summarize the error type etc. 
#the log is mainly printed by        
#print ERR "$biosampleId\t$validationResult{$ruleset}{detail}{$biosampleId}{type}\terror\t$validationResult{$ruleset}{detail}{$biosampleId}{message}\n";
use strict;
use Data::Dumper;
require "misc.pl";

my $include_warning = 0; #1 means include warning, while 0 means exclude warning
my $output_all_submissions = 0; #1 means output every submission even there is no error

die "Usage: perl parse_biosample_import_log.pl <error log file> where the error log file is generated by backend import_from_biosample.pl" unless (scalar @ARGV == 1);

#open IN,"biosample_import_error_20180627.txt";
#open IN,"biosample_import_errors_20180706.txt";
open IN,"$ARGV[0]";
my %errors;
open OUT,">manual curation candidates.txt";
my %done;

#my %tmp;

#read in all FAANG submissions from BioSample
my %submissions;
my %biosampleIds;
&getSubmissions();
#print "\nThere are ".(scalar keys %submissions)." groups\n";

#print scalar keys %biosampleIds;
#print " records\n";
#foreach my $id(keys %biosampleIds){
#	print "$id\n" unless (exists $tmp{$id}); #this could happen as the group has private sample record, e.g. SAMEA103988892
#	print "$id\n" if ($biosampleIds{$id}>1); #this could happen when one sample appears in more than one submission
#}
#exit;

#parse the local import error log file
while (my $line =<IN>){
	chomp($line);
	my ($biosample,$type,$overall,$detail) = split("\t",$line);
	next unless ($overall eq "error" || $include_warning == 1); #continue only if error or set to include warnings
	my @errors = split(";",$detail);
	my %msgs;#use hash to avoid duplicate error in the same biosample record
	foreach my $error(@errors){
		#one error message is in the format of (WARNING)id_number:attribute not in rule set
		#category either error or warning, msg in the form of field_name:error_detail
		my ($category,$msg) = split(/\)/,$error);
		$category = substr($category,1);#remove the starting (

		next if (lc($category) eq "warning" && $include_warning == 0);
		next if ($msg eq "id_number:attribute not in rule set");#id_number is manually introduced to make it possible sort biosample meaningfully
		#special cases, generate list to do manual curation
		if($msg =~/gestational age at sample collection\:no text provided/ || $msg =~/This field is optional, so if not providing/){
			my ($field,undef) = split(":",$msg);
			unless (exists $done{$field}{$biosample}){
				print OUT "$biosample\t$field\n";
				$done{$field}{$biosample}=1;
			}
		}
		if ($msg =~/^(.+Date)\s\d+\/\d+\/\d+\s(.+)$/){ #remove the actual date value from the log which is not useful here
			$msg = "$1 $2";
		}
		$msgs{$msg} = lc($category);
	}
	if (scalar keys %msgs > 0){
		$errors{$biosample}{type} = $type;#organism or specimen
		#separate error message into error or warning (when include_warning = 0, do not deal with them)
		foreach my $msg (keys %msgs){
			push (@{$errors{$biosample}{$msgs{$msg}}},$msg);
		}
	}
}
#print Dumper(\%errors);
#generate submission error report
$"=", ";
foreach my $submission(sort {$a cmp $b} keys %submissions){
	next if ($submission eq "noGroup"); #artifically created, skipped for now
	my $str = "BioSample submission id: $submissions{$submission}{name} ($submission)\n";
	$str .= "Submission title: $submissions{$submission}{title}\n";
	$str .= "Release date: $submissions{$submission}{release}\n";
	$str .= "Update date: $submissions{$submission}{update}\n";
	$str .= "Submitters: @{$submissions{$submission}{contact}}\n";
	$str .= "Submitter emails: @{$submissions{$submission}{email}}\n" if (exists $submissions{$submission}{email});
	my @organizations = keys %{$submissions{$submission}{organization}};
	$str .= "Submitter institution: @organizations\n\n";

	my %error_type;
	foreach my $id (keys %{$submissions{$submission}{members}}){
		#some records are totally valid
		next unless (exists $errors{$id});
		my @errors = @{$errors{$id}{error}};
		foreach my $msg(@errors){
			$error_type{"error:$msg"}{$id}=1;
		}
		if ($include_warning == 1){
			foreach my $msg (@{$errors{$id}{warning}}){
				$error_type{"warning:$msg"}{$id}=1;
			}
		}
	}

	print "$str" if (scalar keys %error_type > 0 || $output_all_submissions == 1);
	foreach my $error(keys %error_type){
		my ($type, $field, $detail) = split(":",$error);
		print "List of fields that are in $type: $field\nSummary of $type: $detail\n";
		my @tmp = sort keys %{$error_type{$error}};
		print "Affected BioSample records: @tmp\n\n";
	}

	print "\n\n\n" if (scalar keys %error_type > 0 || $output_all_submissions == 1);
}


sub getSubmissions(){
  my %result;	
  my $json_url = "https://www.ebi.ac.uk/biosamples/samples?size=1000&filter=attr%3Aproject%3AFAANG";
  my $num = 0;

	while (length($json_url)>0){
		my $json_text = &fetch_json_by_url($json_url);
    foreach my $item (@{$json_text->{_embedded}{samples}}){
	  	if (uc($$item{characteristics}{project}[0]{text}) eq "FAANG"){
#	  		$tmp{$$item{accession}}=1;
	  		$num++;
	  		my @groups = &extractGroupId($$item{relationships});
#	  		print "Group for $$item{accession}: @groups\n";
	  		if((scalar @groups)==0){
  				$submissions{noGroup}{members}{$$item{accession}}{status} = 'unknown';
  			}else{
  				foreach my $group(@groups){
		  			&getGroupInfo($group) unless (exists $submissions{$group});
  				}
  			}
	  	}
    }
    $json_url = $$json_text{_links}{next}{href};# Get URL for next page
  }

  print "There are $num records related with FAANG downloaded\n";
#  return %result;
}
#extract group id from the sample relationship values
sub extractGroupId(){
	my @relationships = @{$_[0]};
	my @groups=();
	foreach my $relationship(@relationships){
		if ($$relationship{type} eq "has member"){
			my $group = $$relationship{source};
			if ($group =~/^SAMEG\d+/){
				push(@groups,$group);
			}
		}
	}
	return @groups;
}
#get group information
sub getGroupInfo(){
	my $group = $_[0];
#	print "within function $group\n";
	my $json_url = "https://www.ebi.ac.uk/biosamples/samples/${group}.json";
#	print "$json_url\n";
	my $json_text = &fetch_json_by_url($json_url);
	my %result = (
		name => $$json_text{name},
		description => $$json_text{characteristics}{"Submission Description"}[0]{text},
		title => $$json_text{characteristics}{"Submission Title"}[0]{text},
		release => $$json_text{releaseDate},
		update => $$json_text{updateDate}
	);
	foreach my $contact(@{$$json_text{contact}}){
		push (@{$result{contact}},$$contact{Name});
		push (@{$result{email}},$$contact{"E-mail"}) if (exists $$contact{"E-mail"});
	}
	foreach my $organization(@{$$json_text{organization}}){
		$result{organization}{$$organization{Name}} = 1;
	}
	#get all related biosample records
	foreach my $relationship(@{$$json_text{relationships}}){
		if ($$relationship{type} eq "has member" && $$relationship{source} eq $group){
			$result{members}{$$relationship{target}}{status} = 'unknown';
		}
 	}
 	%{$submissions{$group}} = %result;
#	return %result;
}

